# firmware/src/sconscript

from __future__ import absolute_import
import json
import os
from tools.buildTools import processFeature

def ensureGeneratedDirsExist(projectDir):
    print("Generating directories")
    if not os.path.isdir("projectSpecific"):
        os.mkdir("projectSpecific")
        print("Created projectSpecific/")

    if not os.path.isdir(projectDir):
        os.mkdir(projectDir)
        print("Created " + projectDir)

    if not os.path.isdir(projectDir + "/generated"):
        os.mkdir(projectDir + "/generated")
        print("Created " + projectDir + "/generated")

    if not os.path.isdir(projectDir + "/generated/HW"):
        os.mkdir(projectDir + "/generated/HW")
        print("Created " + projectDir + "/generated/HW")


Import('env', 'project', 'verbose')

buildOptions = json.loads(File('buildOptions.json').get_text_contents())

if project not in buildOptions:
    print(f"Invalid project '{project}'. Available projects: {', '.join(buildOptions.keys())}")
    Exit(1)
else:
    print(f"Building project {project}")

outputName = buildOptions[project]['outputName']
projectDir = buildOptions[project]['projectDir']
mainFile = projectDir + "/" + buildOptions[project]['mainFile']

processorDir = None
if 'processorDir' in buildOptions[project]:
    processorDir = buildOptions[project]['processorDir']

ensureGeneratedDirsExist(projectDir)

sources = []

# Load the feature selections
print("Loading features")
featureSelections = json.loads(File(projectDir + '/featureSelections.json').get_text_contents())
sharedFeatureList = json.loads(File('shared/featureList.json').get_text_contents())
projectSpecificFeatureList = json.loads(File(projectDir + '/featureList.json').get_text_contents())

featuresEnabled = []
for feature in featureSelections:
    if featureSelections[feature]['active'] is True:
        featuresEnabled, sources = processFeature(feature, featuresEnabled, sources, sharedFeatureList, verbose)

if verbose:
    print("  Starting project specific feature scan")
for feature in featuresEnabled:
    if feature in projectSpecificFeatureList:
        featuresEnabled, sources = processFeature(feature, featuresEnabled, sources, projectSpecificFeatureList, verbose)

# Generate the pinConfig files
if processorDir is not None:
    if verbose:
        print("  Starting processor specific feature scan")
    featuresEnabled, generatedSources = env.SConscript(processorDir + "/SConscript", exports='projectDir env featuresEnabled verbose')
    sources.extend(generatedSources)

# Add the main file
sources.insert(0, mainFile)

# Include directories in cpppath. TODO: Make this less hard-coded
env.Append(CPPPATH = [projectDir, 'shared/app', 'shared/RTOS', projectDir + '/app', projectDir + '/generated/HW'])


# TODO: Create a list of all features that are enabled, and include how they were turned on. From manual featureSelections
# or from being activated by higher-level features.
# TODO: Make a scanner to parse the featureSelections file and ensure that if a higher-level feature is enabled, all
# of its dependencies are either not defined (and will be automatically defined) or are defined and active. If there
# are any dependencies that are defined but not active, print a warning to the console and exit.
# TODO: Seperate this file into more functions.

# Write all features, source files, and include paths to a log file
with open(projectDir + "/generated/buildLog.txt", "w") as logFile: # TODO: Move this to build directory
    if verbose:
        print("Writing build log")

    logFile.write("Features enabled:\n")
    for feature in featuresEnabled:
        logFile.write("  " + feature + "\n")
    logFile.write("Sources found:\n")
    for source in sources:
        logFile.write("  " + source + "\n")
    logFile.write("Include paths:\n")
    for path in env['CPPPATH']:
        logFile.write("  " + path + "\n")
    logFile.close()


# Build the selected target
print("Starting build")
if verbose:
    print("  Features enabled:")
    for feature in featuresEnabled:
        print("    " + feature)
    print("  Sources found:")
    for source in sources:
        print("    " + source)
    print("  Include paths:")
    for path in env['CPPPATH']:
        print("    " + path)
    # print(env.Dump()) # Uncomment to check all environment variables

env.Program(source=sources, target=outputName)
