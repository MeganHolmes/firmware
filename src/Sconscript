# firmware/src/sconscript

import json
import os

def ensureGeneratedDirsExist(projectDir):
    if not os.path.isdir("projectSpecific"):
        os.mkdir("projectSpecific")
        print("Created projectSpecific/")

    if not os.path.isdir(projectDir):
        os.mkdir(projectDir)
        print("Created " + projectDir)

    if not os.path.isdir(projectDir + "/generated"):
        os.mkdir(projectDir + "/generated")
        print("Created " + projectDir + "/generated")

    if not os.path.isdir(projectDir + "/generated/HW"):
        os.mkdir(projectDir + "/generated/HW")
        print("Created " + projectDir + "/generated/HW")


Import('env', 'project')

buildOptions = json.loads(File('buildOptions.json').get_text_contents())

if project not in buildOptions:
    print(f"Invalid project '{project}'. Available projects: {', '.join(buildOptions.keys())}")
    Exit(1)

sources = buildOptions[project]['sourceList']
outputName = buildOptions[project]['outputName']
projectDir = buildOptions[project]['projectDir']
mainFile = projectDir + "/" + buildOptions[project]['mainFile']

processorDir = None
if 'processorDir' in buildOptions[project]:
    processorDir = buildOptions[project]['processorDir']

ensureGeneratedDirsExist(projectDir)

# Generate the pinConfig files
if processorDir is not None:
    generatedSources = env.SConscript(processorDir + "/SConscript", exports='projectDir')
    sources.extend(generatedSources)

# TODO: Create a list of all features that are enabled, and include how they were turned on. From manual featureSelections
# or from being activated by higher-level features. Output it to console but also to a file in the build directory.
# TODO: Make a scanner to parse the featureSelections file and ensure that if a higher-level feature is enabled, all
# of its dependencies are either not defined (and will be automatically defined) or are defined and active. If there
# are any dependencies that are defined but not active, print a warning to the console and exit.

# Build the selected target
print("Starting build")
env.Program(source=mainFile, target=outputName)
